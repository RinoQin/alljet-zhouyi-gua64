package org.alljet.gua64;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import org.alljet.gua64.Constants;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.ResourceBundle;

public class Zhouyi64Gua {
    private JPanel panel1;
    private JLabel chooseLable;
    private JButton btn1;
    private JTextField questionText;
    private JButton btn2;
    private JTextField ansText;
    private JButton submit;
    private JTextArea allResult;
    private JTextField result;
    private JTextArea desc;


    private static String[] question;
    private static String[] answer;
    private static int allitemCount = 56;

    int index = 0;

    private String ansStr = "";
    List<Integer> containIndex = new ArrayList<Integer>(Constants.questionCount);
    private int askRight = 0;
    private int askWrong = 0;
    private static final int score = (Constants.fullScore / Constants.questionCount);
    private int totalScore = 0;

    public Zhouyi64Gua() {
        btn1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                question = Constants.GUA_YAO;
                answer = Constants.GUA_NAME;
                gameStart();
                btn1.setEnabled(false);
                btn2.setEnabled(false);
                ansText.setEnabled(true);
                submit.setEnabled(true);
                ansText.setText("");
            }
        });

        btn2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                question = Constants.GUA_NAME;
                answer = Constants.GUA_YAO;
                gameStart();
                btn1.setEnabled(false);
                btn2.setEnabled(false);
                ansText.setEnabled(true);
                submit.setEnabled(true);
                ansText.setText("");
            }
        });
        submit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                checkAnswer(ansText.getText());
            }
        });
        ansText.addKeyListener(new KeyListener() {
            public void keyPressed(KeyEvent e) {
                if (e.getSource() == ansText) {
                    if (e.getKeyCode() == KeyEvent.VK_ENTER) {//判断按下的键是否是回车键
                        checkAnswer(ansText.getText());
                    }
                }
            }

            public void keyReleased(KeyEvent e) {
            }

            public void keyTyped(KeyEvent e) {
            }
        });
    }

    private void checkAnswer(String scaString) {
        result.setText("");
        if (scaString.equals(ansStr)) {
            result.setText("正确");
            askRight += 1;
            totalScore += score;
        } else {
            result.setText("错误，正确答案是：" + ansStr);
            askWrong += 1;
        }
        ansText.setText("");
        allResult.setText("答对" + askRight + "题，答错" + askWrong + "题，总分" + totalScore);
        index = index + 1;
        gameStart();

    }


    private void gameStart() {

        if (index == Constants.questionCount) {
            //答题结束
            questionText.setText("答题结束");
            allResult.setText("全部答完，答对" + askRight + "题，答错" + askWrong + "题，总分" + totalScore);
            ansText.setText("请输入答案");
            btn1.setEnabled(true);
            btn2.setEnabled(true);
            ansText.setEnabled(false);
            submit.setEnabled(false);
            containIndex.clear();
            askRight = 0;
            askWrong = 0;
            totalScore = 0;
            index = 0;
            ansStr = "";
            return;
        }
        Random random = new Random();


        int s = random.nextInt(allitemCount);
        boolean flag = true;
        while (flag) {
            if (containIndex.contains(s))
                s = random.nextInt(allitemCount);
            else
                flag = false;
        }
        containIndex.add(s);
        questionText.setText("第" + (index + 1) + "题:" + question[s]);
        ansStr = answer[s];
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:max(d;4px):noGrow,fill:349px:grow", "center:22px:noGrow,top:7dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow"));
        panel1.setAlignmentX(0.0f);
        panel1.setAlignmentY(0.0f);
        panel1.setBackground(new Color(-16777216));
        panel1.setForeground(new Color(-1));
        panel1.setMaximumSize(new Dimension(300, 400));
        panel1.setMinimumSize(new Dimension(300, 400));
        panel1.setPreferredSize(new Dimension(300, 400));
        chooseLable = new JLabel();
        Font chooseLableFont = this.$$$getFont$$$("MingLiU", Font.BOLD, 15, chooseLable.getFont());
        if (chooseLableFont != null) chooseLable.setFont(chooseLableFont);
        chooseLable.setForeground(new Color(-1));
        chooseLable.setText("请选择游戏模式");
        CellConstraints cc = new CellConstraints();
        panel1.add(chooseLable, cc.xy(2, 1, CellConstraints.CENTER, CellConstraints.CENTER));
        btn1 = new JButton();
        btn1.setBackground(new Color(-11300969));
        btn1.setEnabled(true);
        btn1.setForeground(new Color(-1));
        btn1.setText("卦名问答");
        panel1.add(btn1, new CellConstraints(2, 3, 1, 1, CellConstraints.DEFAULT, CellConstraints.DEFAULT, new Insets(0, 50, 0, 50)));
        questionText = new JTextField();
        questionText.setBackground(new Color(-16777216));
        questionText.setEditable(false);
        questionText.setEnabled(true);
        questionText.setForeground(new Color(-1));
        questionText.setText("题目：");
        panel1.add(questionText, cc.xy(2, 7, CellConstraints.FILL, CellConstraints.DEFAULT));
        btn2 = new JButton();
        btn2.setBackground(new Color(-11300969));
        btn2.setForeground(new Color(-1));
        btn2.setText("卦爻问答");
        panel1.add(btn2, new CellConstraints(2, 5, 1, 1, CellConstraints.DEFAULT, CellConstraints.DEFAULT, new Insets(0, 50, 0, 50)));
        ansText = new JTextField();
        ansText.setBackground(new Color(-16777216));
        ansText.setEditable(true);
        ansText.setEnabled(false);
        ansText.setForeground(new Color(-1));
        ansText.setText("请输入答案");
        panel1.add(ansText, cc.xy(2, 9, CellConstraints.FILL, CellConstraints.DEFAULT));
        submit = new JButton();
        submit.setActionCommand("提交");
        submit.setBackground(new Color(-11300969));
        submit.setEnabled(false);
        submit.setForeground(new Color(-1));
        submit.setText("提交");
        panel1.add(submit, new CellConstraints(2, 11, 1, 1, CellConstraints.FILL, CellConstraints.DEFAULT, new Insets(0, 50, 0, 50)));
        result = new JTextField();
        result.setBackground(new Color(-16777216));
        result.setEditable(false);
        result.setForeground(new Color(-1));
        result.setText("");
        panel1.add(result, cc.xy(2, 13, CellConstraints.FILL, CellConstraints.DEFAULT));
        desc = new JTextArea();
        desc.setBackground(new Color(-16777216));
        desc.setEditable(false);
        desc.setForeground(new Color(-12938));
        desc.setLineWrap(true);
        desc.setText(ResourceBundle.getBundle("config").getString("gram_desc"));
        panel1.add(desc, cc.xy(2, 17, CellConstraints.FILL, CellConstraints.FILL));
        allResult = new JTextArea();
        allResult.setBackground(new Color(-16777216));
        allResult.setEditable(false);
        allResult.setEnabled(true);
        allResult.setForeground(new Color(-1));
        allResult.setLineWrap(false);
        allResult.setText("成绩！");
        allResult.setWrapStyleWord(false);
        panel1.add(allResult, cc.xy(2, 15, CellConstraints.FILL, CellConstraints.FILL));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
